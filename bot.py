import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∫–∞–Ω–∞–ª–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è!
CHANNEL_ID = "-1002332689318"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ ID —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –í–µ–±—Ö—É–∫ URL
WEBHOOK_HOST = "https://anonimki.onrender.com"
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –°–ø–ª–µ—Ç–Ω–∏–∫! üî•\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è —Å–ø–ª–µ—Ç–Ω—è–º–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ!")

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª
@dp.message()
async def forward_message(message: types.Message):
    try:
        forwarded_message = await bot.send_message(
            chat_id=CHANNEL_ID,
            text=f"üî• *–ù–æ–≤–∞—è —Å–ø–ª–µ—Ç–Ω—è –æ—Ç –∞–Ω–æ–Ω–∏–º–∞:*\n\n{message.text}",
            parse_mode="Markdown"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        await bot.send_poll(
            chat_id=CHANNEL_ID,
            question="–û—Ü–µ–Ω–∏—Ç–µ —Å–ø–ª–µ—Ç–Ω—é:",
            options=["‚úÖ –ü—Ä–∞–≤–¥–∞", "‚ùå –õ–æ–∂—å"],
            is_anonymous=True
        )

        await message.answer("–°–ø–ª–µ—Ç–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª! üî•")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def handle_webhook(request):
    json_str = await request.json()
    update = types.Update(**json_str)
    await dp._update_handlers.notify(update)
    return web.Response()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

# –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫ `Unclosed client session`)
async def on_shutdown():
    await bot.session.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)

    await on_startup()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 5000)))
    await site.start()

    try:
        while True:
            await asyncio.sleep(3600)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
    except (KeyboardInterrupt, SystemExit):
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
