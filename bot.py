import logging
import os
from aiogram import Bot, Dispatcher, types
from aiohttp import web

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∫–∞–Ω–∞–ª–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHANNEL_ID = "-1002332689318"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∫–∞–Ω–∞–ª–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –í–µ–±—Ö—É–∫ URL
WEBHOOK_HOST = 'https://anonimki.onrender.com'  # URL –≤–∞—à–µ–≥–æ Render –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBHOOK_PATH = f'/{BOT_TOKEN}'
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
async def on_start_webhook(request):
    return web.Response(text="Webhook is set")

async def on_webhook(request):
    json_str = await request.json()
    update = types.Update(**json_str)
    await dp.process_update(update)
    return web.Response()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –°–ø–ª–µ—Ç–Ω–∏–∫! üî•\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è —Å–ø–ª–µ—Ç–Ω—è–º–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–ø–ª–µ—Ç–Ω–∏)
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_message(message: types.Message):
    gossip = message.text.strip()
    if gossip:
        try:
            await bot.send_message(CHANNEL_ID, f"–ù–æ–≤–∞—è —Å–ø–ª–µ—Ç–Ω—è –æ—Ç –∞–Ω–æ–Ω–∏–º–∞: {gossip}")

            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å
            await bot.send_poll(
                chat_id=CHANNEL_ID,
                question="–û—Ü–µ–Ω–∏—Ç–µ —Å–ø–ª–µ—Ç–Ω—é:",
                options=["‚úÖ –ü—Ä–∞–≤–¥–∞", "‚ùå –õ–æ–∂—å"],
                is_anonymous=True,
                type="regular"
            )

            await message.answer("–°–ø–ª–µ—Ç–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üî•")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
async def on_start(request):
    return web.Response(text="Webhook setup successfully.")

async def setup():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    await bot.set_webhook(WEBHOOK_URL)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å aiohttp
def main():
    app = web.Application()
    app.router.add_get('/', on_start_webhook)
    app.router.add_post(f'/{BOT_TOKEN}', on_webhook)

    # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook
    web.run_app(app, host='0.0.0.0', port=int(os.getenv('PORT', 5000)))

if __name__ == '__main__':
    main()
