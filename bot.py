import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∫–∞–Ω–∞–ª–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è!
if not BOT_TOKEN:
    logging.critical("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

CHANNEL_ID = "-1002332689318"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID –∫–∞–Ω–∞–ª–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# URL –≤–µ–±—Ö—É–∫–∞
WEBHOOK_HOST = "https://anonimki.onrender.com"
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –°–ø–ª–µ—Ç–Ω–∏–∫! üî•\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è —Å–ø–ª–µ—Ç–Ω—è–º–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ!")

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª
@dp.message()
async def forward_message(message: types.Message):
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    try:
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=f"üî• *–ù–æ–≤–∞—è —Å–ø–ª–µ—Ç–Ω—è –æ—Ç –∞–Ω–æ–Ω–∏–º–∞:*\n\n{message.text}",
            parse_mode="Markdown"
        )
        await message.answer("–°–ø–ª–µ—Ç–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª! üî•")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def handle_webhook(request):
    json_str = await request.json()
    update = types.Update(**json_str)
    logging.info(f"üîî –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
    await dp.feed_update(bot, update)
    return web.Response()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
async def on_shutdown():
    await bot.session.close()
    logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)

    await on_startup()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 5000)))
    await site.start()

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!")
    
    try:
        while True:
            await asyncio.sleep(3600)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
    except (KeyboardInterrupt, SystemExit):
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
